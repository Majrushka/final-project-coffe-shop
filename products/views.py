from django.shortcuts import render, get_object_or_404, redirect
from django.db.models import Q
from django.contrib.auth.decorators import login_required
from django.contrib.admin.views.decorators import staff_member_required
from django.contrib import messages
from django.http import JsonResponse
from django.core.paginator import Paginator
from django.core.mail import send_mail
from django.conf import settings
from django.db import IntegrityError
import logging
from rest_framework.decorators import api_view
from rest_framework.response import Response

from .models import Coffee, Tea, Syrup, Cart, CartItem, Order, TelegramUser
from .forms import AddToCartForm, UpdateCartForm, OrderForm

logger = logging.getLogger(__name__)

# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
def get_user_cart(user):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    active_carts = Cart.objects.filter(user=user, is_active=True)
    
    if active_carts.count() > 1:
        cart = active_carts.order_by('-created_at').first()
        active_carts.exclude(id=cart.id).update(is_active=False)
        return cart
    elif active_carts.count() == 1:
        return active_carts.first()
    else:
        cart = Cart.objects.create(user=user, is_active=True)
        return cart

def normalize_phone(phone):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"""
    import re
    digits = re.sub(r'\D', '', phone)
    
    if digits.startswith('375'):
        return '+' + digits
    elif digits.startswith('80'):
        return '+375' + digits[2:]
    elif len(digits) == 9 and digits.startswith(('29', '33', '44', '25')):
        return '+375' + digits
    else:
        return '+' + digits

def send_order_confirmation_email(order, cart):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞"""
    try:
        subject = f'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order.id}'
        
        items_list = ""
        for item in cart.items.all():
            items_list += f"- {item.product_name}: {item.quantity} —à—Ç. x {item.unit_price} —Ä—É–±. = {item.total_price} —Ä—É–±.\n"
        
        message = f"""
        –£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {order.first_name} {order.last_name}!

        –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∑–∞–∫–∞–∑ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ!

        –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:
        –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order.id}
        –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}
        
        –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:
        {items_list}
        
        –û–±—â–∞—è —Å—É–º–º–∞: {order.total_price} —Ä—É–±.
        
        –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
        –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}
        Email: {order.email}
        
        –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.get_status_display()}
        
        –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.
        
        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –ö–æ–º–∞–Ω–¥–∞ Fun Coffee
        """
        
        send_mail(
            subject,
            message,
            settings.DEFAULT_FROM_EMAIL,
            [order.email],
            fail_silently=True,
        )
        logger.info(f"‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id}: {str(e)}")

def send_new_order_notification(order, cart):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    try:
        subject = f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}'
        
        items_list = ""
        for item in cart.items.all():
            items_list += f"- {item.product_name}: {item.quantity} —à—Ç. x {item.unit_price} —Ä—É–±. = {item.total_price} —Ä—É–±.\n"
        
        message = f"""
        –ü–û–°–¢–£–ü–ò–õ –ù–û–í–´–ô –ó–ê–ö–ê–ó!

        –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:
        –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order.id}
        –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}
        
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:
        –ò–º—è: {order.first_name} {order.last_name}
        –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}
        Email: {order.email}
        
        –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:
        {items_list}
        
        –û–±—â–∞—è —Å—É–º–º–∞: {order.total_price} —Ä—É–±.
        
        –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.get_status_display()}
        """
        
        owner_email = getattr(settings, 'OWNER_EMAIL', 'owner@example.com')
        
        send_mail(
            subject,
            message,
            settings.DEFAULT_FROM_EMAIL,
            [owner_email],
            fail_silently=True,
        )
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É: {str(e)}")

# API –î–õ–Ø TELEGRAM –ë–û–¢–ê
@api_view(['POST'])
def customer_orders(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤. –î–∞–Ω–Ω—ã–µ: {request.data}")
        
        phone = request.data.get('phone')
        telegram_chat_id = request.data.get('telegram_chat_id')
        first_name = request.data.get('first_name')
        last_name = request.data.get('last_name')
        username = request.data.get('username')
        
        if not phone:
            logger.error("‚ùå Phone number is required")
            return Response({'error': 'Phone number is required'}, status=400)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        normalized_phone = normalize_phone(phone)
        logger.info(f"üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞: {phone} -> {normalized_phone}")
        
        # –û–ë–†–ê–ë–û–¢–ö–ê TelegramUser - –£–ü–†–û–©–ï–ù–ù–´–ô –ü–û–î–•–û–î
        if telegram_chat_id:
            try:
                logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chat_id: {telegram_chat_id}")
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id
                existing_user_by_chat = TelegramUser.objects.filter(telegram_chat_id=telegram_chat_id).first()
                
                if existing_user_by_chat:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ chat_id: {existing_user_by_chat}")
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ chat_id - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    existing_user_by_chat.phone_number = normalized_phone
                    existing_user_by_chat.first_name = first_name
                    existing_user_by_chat.last_name = last_name
                    existing_user_by_chat.username = username
                    existing_user_by_chat.save()
                    logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ chat_id, –∏—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    existing_user_by_phone = TelegramUser.objects.filter(phone_number=normalized_phone).first()
                    
                    if existing_user_by_phone:
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {existing_user_by_phone}")
                        # –û–±–Ω–æ–≤–ª—è–µ–º chat_id —É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        existing_user_by_phone.telegram_chat_id = telegram_chat_id
                        existing_user_by_phone.first_name = first_name
                        existing_user_by_phone.last_name = last_name
                        existing_user_by_phone.username = username
                        existing_user_by_phone.save()
                        logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        logger.info("üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                        telegram_user = TelegramUser(
                            phone_number=normalized_phone,
                            telegram_chat_id=telegram_chat_id,
                            first_name=first_name,
                            last_name=last_name,
                            username=username
                        )
                        telegram_user.save()
                        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_user}")
                        
            except IntegrityError as e:
                logger.warning(f"‚ö†Ô∏è IntegrityError: {str(e)}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                logger.info("üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        # –ü–û–ò–°–ö –ó–ê–ö–ê–ó–û–í (–æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        logger.info(f"üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {normalized_phone}")
        
        try:
            orders = Order.objects.filter(phone=normalized_phone).order_by('-created_at')[:5]
            logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {orders.count()}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")
            return Response({'error': '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤'}, status=500)
        
        if not orders.exists():
            logger.info(f"‚ùå –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {normalized_phone}")
            return Response({'error': '–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}, status=404)
        
        orders_data = []
        for order in orders:
            try:
                order_data = {
                    'id': order.id,
                    'created_at': order.created_at.strftime('%d.%m.%Y %H:%M'),
                    'total_price': str(order.total_price),
                    'status': order.get_status_display(),
                    'items': []
                }
                
                for item in order.cart.items.all():
                    order_data['items'].append({
                        'product_name': item.product_name,
                        'quantity': item.quantity,
                        'unit_price': str(item.unit_price),
                        'total_price': str(item.total_price)
                    })
                
                orders_data.append(order_data)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ #{order.id}: {str(e)}")
                continue
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(orders_data)} –∑–∞–∫–∞–∑–æ–≤")
        return Response({'orders': orders_data})
        
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ customer_orders: {str(e)}")
        return Response({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)

# –û–°–ù–û–í–ù–´–ï –í–¨–Æ–®–ö–ò –°–ê–ô–¢–ê
def index(request):
    coffees = Coffee.objects.all().order_by('-is_available')
    teas = Tea.objects.all().order_by('-is_available')
    syrups = Syrup.objects.all().order_by('-is_available')
    
    context = {
        'coffees': coffees,
        'teas': teas,
        'syrups': syrups,
    }
    
    return render(request, 'products/index.html', context)

def coffee_list(request):
    coffees = Coffee.objects.all().order_by('-is_available')
    paginator = Paginator(coffees, 4)
    page_number = request.GET.get('page', 1)
    coffees = paginator.get_page(page_number)
    return render(request, 'products/coffee_list.html', {"coffees": coffees})

def tea_list(request):
    teas = Tea.objects.all().order_by('-is_available')
    return render(request, 'products/tea_list.html', {"teas": teas})

def syrup_list(request):
    syrups = Syrup.objects.all().order_by('-is_available')
    return render(request, 'products/syrup_list.html', {"syrups": syrups})

def delivery_info(request):
    return render(request, 'products/delivery_info.html')

def coffee_detail(request, pk):
    coffee = get_object_or_404(Coffee, pk=pk)
    form = AddToCartForm(product_type='coffee')
    return render(request, 'products/coffee_detail.html', {
        'coffee': coffee,
        'form': form
    })

def tea_detail(request, pk):
    tea = get_object_or_404(Tea, pk=pk)
    form = AddToCartForm(product_type='tea')
    return render(request, 'products/tea_detail.html', {
        'tea': tea,
        'form': form
    })

def syrup_detail(request, pk):
    syrup = get_object_or_404(Syrup, pk=pk)
    form = AddToCartForm(product_type='syrup')
    return render(request, 'products/syrup_detail.html', {
        'syrup': syrup,
        'form': form
    })

def product_search(request):
    query = request.GET.get('q', '').strip().title()
    results = []
    
    if query in ['–∫–æ—Ñ–µ', 'coffee']:
        return redirect('coffee_list')
    elif query in ['—á–∞–π', '—á–∞–∏', 'tea']:
        return redirect('tea_list')
    elif query in ['—Å–∏—Ä–æ–ø', '—Å–∏—Ä–æ–ø—ã', 'syrup']:
        return redirect('syrup_list')
    
    results = []

    if query:
        coffee_results = Coffee.objects.filter(name__iexact=query)
        tea_results = Tea.objects.filter(name__iexact=query)
        syrup_results = Syrup.objects.filter(name__iexact=query)
        
        results = list(coffee_results) + list(tea_results) + list(syrup_results)
        
        if not results:
            coffee_results = Coffee.objects.filter(name__icontains=query)
            tea_results = Tea.objects.filter(name__icontains=query)
            syrup_results = Syrup.objects.filter(name__icontains=query)
            results = list(coffee_results) + list(tea_results) + list(syrup_results)
        
        if len(results) == 1:
            product = results[0]
            if isinstance(product, Coffee):
                return redirect('coffee_detail', pk=product.pk)
            elif isinstance(product, Tea):
                return redirect('tea_detail', pk=product.pk)
            elif isinstance(product, Syrup):
                return redirect('syrup_detail', pk=product.pk)
    
    return render(request, 'products/search_results.html', {
        'results': results,
        'query': query,
    })

# –í–¨–Æ–®–ö–ò –ö–û–†–ó–ò–ù–´ (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–´–•)
@login_required
def add_to_cart(request, product_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    
    if 'coffee' in request.path:
        product_type = 'coffee'
        product = get_object_or_404(Coffee, id=product_id, is_available=True)
    elif 'tea' in request.path:
        product_type = 'tea'
        product = get_object_or_404(Tea, id=product_id, is_available=True)
    elif 'syrup' in request.path:
        product_type = 'syrup'
        product = get_object_or_404(Syrup, id=product_id, is_available=True)
    else:
        messages.error(request, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞')
        return redirect('index')
    
    cart = get_user_cart(request.user)
    
    if request.method == 'POST':
        form = AddToCartForm(request.POST, product_type=product_type)
        if form.is_valid():
            quantity = form.cleaned_data['quantity']
            grams = form.cleaned_data['grams']
            
            if product_type == 'syrup':
                grams = None
            
            if not product.is_available:
                messages.error(request, '–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
                return redirect(f'{product_type}_detail', pk=product_id)
            
            if product_type in ['coffee', 'tea'] and not grams:
                messages.error(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å')
                return redirect(f'{product_type}_detail', pk=product_id)
            
            if product_type == 'coffee' and grams not in [250, 500, 1000]:
                messages.error(request, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Å –¥–ª—è –∫–æ—Ñ–µ')
                return redirect(f'{product_type}_detail', pk=product_id)
            elif product_type == 'tea' and grams not in [100, 500]:
                messages.error(request, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Å –¥–ª—è —á–∞—è')
                return redirect(f'{product_type}_detail', pk=product_id)
            
            cart_item, created = CartItem.objects.get_or_create(
                cart=cart,
                product_type=product_type,
                product_id=product_id,
                grams=grams,
                defaults={'quantity': quantity}
            )
            
            if not created:
                cart_item.quantity += quantity
                cart_item.save()
                messages.success(request, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ')
            else:
                messages.success(request, f'–¢–æ–≤–∞—Ä "{product.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
            
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({
                    'success': True, 
                    'message': '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É',
                    'cart_total_items': cart.total_items
                })
            
            return redirect('index')
    
    return redirect(f'{product_type}_detail', pk=product_id)

@login_required
def cart_detail(request):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã"""
    cart = get_user_cart(request.user)
    return render(request, 'products/cart/cart_detail.html', {'cart': cart})

@login_required
def update_cart_item(request, item_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    cart = get_user_cart(request.user)
    cart_item = get_object_or_404(CartItem, id=item_id, cart=cart)
    
    if request.method == 'POST':
        form = UpdateCartForm(request.POST, instance=cart_item)
        if form.is_valid():
            quantity = form.cleaned_data['quantity']
            
            if quantity == 0:
                product_name = cart_item.product_name
                cart_item.delete()
                messages.success(request, f'–¢–æ–≤–∞—Ä "{product_name}" —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')
            else:
                form.save()
                messages.success(request, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
    
    return redirect('cart_detail')

@login_required
def remove_from_cart(request, item_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    cart = get_user_cart(request.user)
    cart_item = get_object_or_404(CartItem, id=item_id, cart=cart)
    product_name = cart_item.product_name
    cart_item.delete()
    messages.success(request, f'–¢–æ–≤–∞—Ä "{product_name}" —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')
    return redirect('cart_detail')

@login_required
def clear_cart(request):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –∫–æ—Ä–∑–∏–Ω—ã"""
    cart = get_user_cart(request.user)
    cart.items.all().delete()
    messages.success(request, '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞')
    return redirect('cart_detail')

@login_required
def checkout(request):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    cart = get_user_cart(request.user)
    
    if not cart.items.exists():
        messages.error(request, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
        return redirect('cart_detail')
    
    if request.method == 'POST':
        form = OrderForm(request.POST)
        if form.is_valid():
            try:
                order = form.save(commit=False)
                order.user = request.user
                order.cart = cart
                order.total_price = cart.total_price
                order.save()
                
                cart.is_active = False
                cart.save()
                
                try:
                    send_order_confirmation_email(order, cart)
                    send_new_order_notification(order, cart)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {str(e)}")
                
                messages.success(request, '–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!')
                return redirect('order_success', order_id=order.id)
                
            except IntegrityError:
                messages.error(request, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
                return redirect('cart_detail')
    else:
        initial_data = {}
        if request.user.first_name:
            initial_data['first_name'] = request.user.first_name
        if request.user.last_name:
            initial_data['last_name'] = request.user.last_name
        if request.user.email:
            initial_data['email'] = request.user.email
            
        form = OrderForm(initial=initial_data)
    
    return render(request, 'products/cart/checkout.html', {
        'cart': cart,
        'form': form
    })

@login_required
def order_success(request, order_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    order = get_object_or_404(Order, id=order_id, user=request.user)
    
    if order.user != request.user:
        messages.error(request, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É')
        return redirect('index')
        
    return render(request, 'products/cart/order_success.html', {'order': order})

# –°–¢–†–ê–ù–ò–¶–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê–ú–ò –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
@staff_member_required
def order_management(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    orders = Order.objects.all().order_by('-created_at')
    
    status_filter = request.GET.get('status')
    if status_filter:
        orders = orders.filter(status=status_filter)
    
    context = {
        'orders': orders,
        'status_choices': Order.STATUS_CHOICES,
        'current_status': status_filter,
    }
    return render(request, 'products/admin/order_management.html', context)